{"version":3,"sources":["containers/logo.svg","components/WrapperTime.js","containers/AppFunc.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","BoxContain","styled","span","BoxMinutes","BoxSeconds","WrapperTime","props","Fragment","minute","second","apiLocalRedeem","apiLocalMember","saveRedeemLocal","payload","a","Promise","resolve","reject","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","catch","err","saveMemberLocal","initLoadData","console","log","then","res","json","result","App","useState","count","setCount","message","setMessage","runingCounter","c","uploadMemberResponse","uploadRedeemResponse","useEffect","Func","socket","socketIOClient","on","data","parse","redeem_code","code","setInterval","className","src","logo","alt","style","marginBottom","color","minutes","seconds","parseInt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f1bc54b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport styled from 'styled-components';\n\nconst BoxContain = styled.span`\n  font-weight: bold;\n  padding: 10px;\n  border: 3px solid #bbb;\n  margin: 5px;\n  font-size: 28px;\n`\nconst BoxMinutes = styled(BoxContain)`\n  color: yellow;\n`\nconst BoxSeconds = styled(BoxContain)`\n  color: red;\n`\nconst WrapperTime = (props) => {\n  return (\n    <React.Fragment>\n      <BoxMinutes>{props.minute}</BoxMinutes>:\n      <BoxSeconds>{props.second}</BoxSeconds>\n    </React.Fragment>\n  )\n}\n\nexport default WrapperTime\n","import React from 'react'\nimport WrapperTime from '../components/WrapperTime'\n\nconst apiLocalRedeem = 'http://localhost:5050/api/redeem';\nconst apiLocalMember = 'http://localhost:5050/api/member';\nconst apiServiceRedeem = 'http://localhost:5050/api/redeem/server';\nconst apiServiceMember = 'http://localhost:5050/api/member/server';\n\nexport const showTimer = (count) => {\n  let minutes, seconds\n  minutes = parseInt(count / 60, 10)\n  seconds = parseInt(count % 60, 10)\n  minutes = minutes < 10 ? \"0\" + minutes : minutes\n  seconds = seconds < 10 ? \"0\" + seconds : seconds\n  return <WrapperTime minute={minutes} second={seconds} />\n}\n\nexport const uploadMember = () => {\n  return new Promise(async (resolve, reject) => {\n    const resMember = await fetch(apiLocalMember)\n    .then(res => res.json())\n    .catch(err => console.log('Cannot get data from '+apiLocalMember));\n    if (resMember) {\n      // const data = resMember.data;\n      resolve('member sync up success');\n    } else {\n      reject('member sync up failure')\n    }\n  })\n}\n\nexport const uploadRedeem = () => {\n  return new Promise(async (resolve, reject) => {\n    const resRedeem = await fetch(apiLocalRedeem)\n    .then(res => res.json())\n    .catch(err => console.log('Cannot get data from '+apiLocalRedeem));\n    if (resRedeem) {\n      // const data = resRedeem.data;\n      resolve('redeem sync up success');\n    } else {\n      reject('redeem sync up failure')\n    }\n  })\n}\n\nexport const saveRedeemLocal = async (payload) => {\n  return new Promise(async (resolve, reject) => {\n    const response = await fetch(apiLocalRedeem, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(payload),\n    }).catch((err) => {\n      reject(err)\n    })\n    if(response){\n      resolve(\"Save redeem to local success\")\n    }else{\n      reject('Cannot save redeem to local')\n    }\n  })\n}\n\nexport const saveMemberLocal = async (payload) => {\n  return new Promise(async (resolve, reject) => {\n    const response = await fetch(apiLocalMember, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(payload),\n    }).catch((err) => {\n      reject(err)\n    })\n    if(response){\n      resolve(\"Save member to local success\")\n    }else{\n      reject('Cannot save member to local')\n    }\n  })\n}\n\nexport const initLoadData = async () => {\n  console.log('init load data function');\n  await fetch(apiServiceMember)\n  .then(res => res.json())\n  .then(result => {\n    console.log('member sync');\n    console.log(result);\n  })\n  .catch(err => console.log('Cannot get data from '+apiLocalMember));\n\n  await fetch(apiServiceRedeem)\n  .then(res => res.json())\n  .then(result => {\n    console.log('redeem sync');\n    console.log(result);\n  })\n  .catch(err => console.log('Cannot get data from '+apiServiceRedeem));\n}\n","import React, { useState, useEffect } from \"react\"\nimport socketIOClient from \"socket.io-client\"\nimport * as Func from './AppFunc';\n\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\n\nconst apiServiceEndpoint = 'http://softcrmpkh.dyndns.org:5000';\n\nconst App = () => {\n  const [count, setCount] = useState(0)\n  const [message, setMessage] = useState(null)\n\n  const runingCounter = async () => {\n    setCount((c) => c + 10)\n    const uploadMemberResponse = await Func.uploadMember().catch(err=>console.log('Error:', err));\n    console.log(uploadMemberResponse);\n    const uploadRedeemResponse = await Func.uploadRedeem().catch(err=>console.log('Error:', err));\n    console.log(uploadRedeemResponse);\n  }\n\n  const handleApi = () => {\n    const response = \"Success\" // wait for dev\n    if (response === \"Success\") {\n      setMessage(\"Call API Success\")\n    } else {\n      setMessage(\"Failure to call API!\")\n    }\n    // reset count\n    setCount(0)\n  }\n\n  useEffect(() => {\n    Func.initLoadData();\n    const socket = socketIOClient(apiServiceEndpoint)\n    socket.on(\"create_redeem\", async (data) => {\n      const payload = JSON.parse(data)\n      await Func.saveRedeemLocal(payload)\n      setMessage(`get redeem:${payload.redeem_code}`)\n    })\n    socket.on(\"create_member\", async (data) => {\n      const payload = JSON.parse(data)\n      await Func.saveMemberLocal(payload)\n      setMessage(`get member:${payload.code}`)\n    })\n    socket.on('error', ()=>{\n      console.log('socket connection error')\n    })\n\n    setInterval(() => {\n      runingCounter()\n    }, 10000)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div style={{ marginBottom: \"20px\", color: \"chocolate\" }}>\n          Time To Refresh\n        </div>\n        <div>{Func.showTimer(count)}</div>\n        <div className=\"DivButton\">\n          <button onClick={() => handleApi()} className=\"Button\">\n            Refresh Sync API Service<br />\n            {apiServiceEndpoint}\n          </button>\n        </div>\n        {message && <div>{message}</div>}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}