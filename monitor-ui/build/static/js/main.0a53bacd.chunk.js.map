{"version":3,"sources":["containers/logo.svg","containers/AppFunc.js","containers/App.js","config/index.js","serviceWorker.js","index.js"],"names":["module","exports","apiLocalRedeem","apiLocalMember","initLoadData","a","console","log","fetch","then","res","json","result","insertId","catch","err","saveRedeemLocal","payload","Promise","resolve","reject","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","saveMemberLocal","ConnectStyle","styled","span","DisConnectStyle","init","Func","handleApi","action","App","useState","client","setClient","connect","setConnect","time","setTime","useEffect","socket","socketIOClient","transports","on","data","parse","id","Date","status","className","src","logo","alt","style","marginBottom","color","onClick","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,qPCArCC,EAAiB,mCACjBC,EAAiB,mCAIVC,EAAY,uCAAG,sBAAAC,EAAA,6DAC1BC,QAAQC,IAAI,sBADc,SAEpBC,MAJiB,2CAKtBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACAA,EAAOC,UAAYD,EAAOC,SAAW,GACvCP,QAAQC,IAAI,0BAA2BK,EAAOC,aAGjDC,OAAM,SAAAC,GAAG,OAAIT,QAAQC,IAAR,gBAAqBQ,EAArB,YAA4BZ,OAThB,uBAWpBK,MAdiB,2CAetBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACAA,EAAOC,UAAYD,EAAOC,SAAW,GACvCP,QAAQC,IAAI,0BAA2BK,EAAOC,aAGjDC,OAAM,SAAAC,GAAG,OAAIT,QAAQC,IAAR,gBAAqBQ,EAArB,YArBS,+CAGG,2CAAH,qDAiDZC,EAAe,uCAAG,WAAOC,GAAP,SAAAZ,EAAA,6DAC7BC,QAAQC,IAAI,yBADiB,kBAEtB,IAAIW,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAf,EAAA,sEACMG,MAAMN,EAAgB,CAC3CmB,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAElBC,SAAU,SACVC,eAAgB,cAChBC,KAAMC,KAAKC,UAAUb,KACpBH,OAAM,SAACC,GACRK,EAAOL,MAbQ,cAgBfI,EAAQ,gCAERC,EAAO,+BAlBQ,2CAAZ,0DAFsB,2CAAH,sDAyBfW,EAAe,uCAAG,WAAOd,GAAP,SAAAZ,EAAA,6DAC7BC,QAAQC,IAAI,yBADiB,kBAEtB,IAAIW,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAf,EAAA,sEACMG,MAAML,EAAgB,CAC3CkB,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAElBC,SAAU,SACVC,eAAgB,cAChBC,KAAMC,KAAKC,UAAUb,KACpBH,OAAM,SAACC,GACRK,EAAOL,MAbQ,cAgBfI,EAAQ,gCAERC,EAAO,+BAlBQ,2CAAZ,0DAFsB,2CAAH,sD,kQCtE5B,IAEMY,EAAeC,IAAOC,KAAV,KAMZC,EAAkBF,IAAOC,KAAV,KAKfE,EAAI,uCAAG,sBAAA/B,EAAA,sEACLgC,IADK,2CAAH,qDAGJC,EAAS,uCAAG,WAAOC,GAAP,SAAAlC,EAAA,6DAChBC,QAAQC,IAAIgC,GADI,SDEhBjC,QAAQC,IAAI,sBACL,IAAIW,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAf,EAAA,sEACOG,MAAML,GAC7BM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBG,OAAM,SAAAC,GAAG,OAAIT,QAAQC,IAAR,gBAAqBQ,EAArB,YAA4BZ,OAHzB,cAKfgB,EAAQ,0BAERC,EAAO,0BAPQ,2CAAZ,yDCHS,uBDgBhBd,QAAQC,IAAI,sBACL,IAAIW,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAf,EAAA,sEACOG,MAAMN,GAC7BO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBG,OAAM,SAAAC,GAAG,OAAIT,QAAQC,IAAR,gBAAqBQ,EAArB,YAA4Bb,OAHzB,cAKfiB,EAAQ,0BAERC,EAAO,0BAPQ,2CAAZ,yDCjBS,2CAAH,sDA0EAoB,EApEH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGQJ,mBAAS,GAHjB,mBAGTK,EAHS,KAGHC,EAHG,KA8ChB,OAzCAC,qBAAU,WACR,IAAMC,EAASC,ICpCK,oCDoC8B,CAAEC,WAAY,CAAC,eACjEF,EAAOG,GAAG,gBAAV,uCAA2B,WAAMC,GAAN,SAAAhD,EAAA,sEACnBgC,EAAqBR,KAAKyB,MAAMD,IADb,2CAA3B,uDAIAJ,EAAOG,GAAG,gBAAV,uCAA2B,WAAMC,GAAN,SAAAhD,EAAA,sEACnBgC,EAAqBR,KAAKyB,MAAMD,IADb,2CAA3B,uDAIAJ,EAAOG,GAAG,aAAa,SAACG,GACtBZ,EAAU,YAAcY,GACxBR,EAAQ,IAAIS,MACZX,GAAW,GAGXT,OAEFa,EAAOG,GAAG,gBAAgB,SAACK,GACzBZ,EAAWY,MAGbR,EAAOG,GAAG,YAAY,SAAAb,GACpBD,EAAUC,MAGZU,EAAOG,GAAG,SAAS,WACjBP,GAAW,MAGbI,EAAOG,GAAG,iBAAiB,SAAArC,GACzB8B,GAAW,MAEbI,EAAOG,GAAG,kBAAkB,SAAArC,GAC1B8B,GAAW,MAEbI,EAAOG,GAAG,cAAc,SAAArC,GACtB8B,GAAW,QAEZ,IAGD,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKC,MAAO,CAAEC,aAAc,OAAQC,MAAO,cACxCtB,GAEH,6BACKE,EAAU,kBAACZ,EAAD,mBAAwC,kBAACG,EAAD,oBAEvD,yBAAKuB,UAAU,aACb,4BAAQO,QAAS,kBAAM3B,KAAaoB,UAAU,UAA9C,2BAC0B,6BCxFZ,sCD4FhB,yCAAeZ,GAAQA,EAAKoB,qBEjFhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtE,MAAK,SAAAuE,GACJA,EAAaC,gBAEdnE,OAAM,SAAAoE,GACL5E,QAAQ4E,MAAMA,EAAMC,c","file":"static/js/main.0a53bacd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const apiLocalRedeem = 'http://localhost:5050/api/redeem';\nconst apiLocalMember = 'http://localhost:5050/api/member';\nconst apiServiceRedeem = 'http://localhost:5050/api/redeem/server';\nconst apiServiceMember = 'http://localhost:5050/api/member/server';\n\nexport const initLoadData = async () => {\n  console.log('call=>initLoadData');\n  await fetch(apiServiceMember)\n  .then(res => res.json())\n  .then(result => {\n    if (result.insertId && result.insertId > 0) {\n      console.log('action:member insertId:', result.insertId)\n    }\n  })\n  .catch(err => console.log(`Error:${err} ${apiLocalMember}`));\n\n  await fetch(apiServiceRedeem)\n  .then(res => res.json())\n  .then(result => {\n    if (result.insertId && result.insertId > 0) {\n      console.log('action:redeem insertId:', result.insertId)\n    }\n  })\n  .catch(err => console.log(`Error:${err} ${apiServiceRedeem}`));\n}\n\nexport const uploadMember = () => {\n  console.log('call=>uploadMember');\n  return new Promise(async (resolve, reject) => {\n    const resMember = await fetch(apiLocalMember)\n    .then(res => res.json())\n    .catch(err => console.log(`Error:${err} ${apiLocalMember}`));\n    if (resMember) {\n      resolve('member sync up success');\n    } else {\n      reject('member sync up failure')\n    }\n  })\n}\n\nexport const uploadRedeem = () => {\n  console.log('call=>uploadRedeem');\n  return new Promise(async (resolve, reject) => {\n    const resRedeem = await fetch(apiLocalRedeem)\n    .then(res => res.json())\n    .catch(err => console.log(`Error:${err} ${apiLocalRedeem}`));\n    if (resRedeem) {\n      resolve('redeem sync up success');\n    } else {\n      reject('redeem sync up failure')\n    }\n  })\n}\n\nexport const saveRedeemLocal = async (payload) => {\n  console.log('call=>saveRedeemLocal');\n  return new Promise(async (resolve, reject) => {\n    const response = await fetch(apiLocalRedeem, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(payload),\n    }).catch((err) => {\n      reject(err)\n    })\n    if(response){\n      resolve(\"Save redeem to local success\")\n    }else{\n      reject('Cannot save redeem to local')\n    }\n  })\n}\n\nexport const saveMemberLocal = async (payload) => {\n  console.log('call=>saveMemberLocal');\n  return new Promise(async (resolve, reject) => {\n    const response = await fetch(apiLocalMember, {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(payload),\n    }).catch((err) => {\n      reject(err)\n    })\n    if(response){\n      resolve(\"Save member to local success\")\n    }else{\n      reject('Cannot save member to local')\n    }\n  })\n}\n","import React, { useEffect, useState } from \"react\"\nimport socketIOClient from \"socket.io-client\"\nimport styled from 'styled-components';\nimport * as Func from './AppFunc';\nimport { config } from '../config';\n\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\n\nconst apiServiceEndpoint = config.apiServiceEndpoint;\n\nconst ConnectStyle = styled.span`\n  background: green;\n  padding: 5px;\n  color: white;\n`;\n\nconst DisConnectStyle = styled.span`\n  background: red;\n  padding: 5px;\n`;\n\nconst init = async () => {\n  await Func.initLoadData();\n}\nconst handleApi = async (action) => {\n  console.log(action);\n  await Func.uploadMember();\n  await Func.uploadRedeem();\n}\n\nconst App = () => {\n  const [client, setClient] = useState('');\n  const [connect, setConnect] = useState(false);\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    const socket = socketIOClient(apiServiceEndpoint, { transports: ['websocket'] })\n    socket.on(\"create_redeem\", async data => {\n      await Func.saveRedeemLocal(JSON.parse(data))\n    })\n\n    socket.on(\"create_member\", async data => {\n      await Func.saveMemberLocal(JSON.parse(data))\n    })\n\n    socket.on(\"client_id\", (id)=>{\n      setClient('Your id: ' + id);\n      setTime(new Date());\n      setConnect(true)\n\n      // call init first time only\n      init();\n    })\n    socket.on(\"client_close\", (status)=>{\n      setConnect(status);\n    })\n\n    socket.on(\"timeSync\", action => {\n      handleApi(action);\n    })\n    \n    socket.on('error', ()=>{\n      setConnect(false);\n    })\n\n    socket.on('connect_error', err => {\n      setConnect(false)\n    });\n    socket.on('connect_failed', err => {\n      setConnect(false)\n    });\n    socket.on('disconnect', err => {\n      setConnect(false)\n    });\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div style={{ marginBottom: \"20px\", color: \"chocolate\" }}>\n          {client}\n        </div>\n        <div>\n            {connect ? <ConnectStyle>Connected.</ConnectStyle>:<DisConnectStyle>Disconnect</DisConnectStyle>}\n        </div>\n        <div className=\"DivButton\">\n          <button onClick={() => handleApi()} className=\"Button\">\n            Refresh Sync API Service<br />\n            {apiServiceEndpoint}\n          </button>\n        </div>\n        <div>Time at: {time && time.toLocaleString()}</div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","export const config = {\n    apiServiceEndpoint: 'http://softcrmpkh.dyndns.org:5000',\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}