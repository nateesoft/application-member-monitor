package apps.main.ui;

import database.connect.MySQLConnect;
import file.config.ConfigProps;
import file.config.FileConfigValue;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import utils.ThaiUtil;

/**
 *
 * @author nateesun
 */
public class TableDataDialog extends javax.swing.JDialog {

    private static final Logger LOGGER = Logger.getLogger(TableDataDialog.class);
    private static final ConfigProps config = FileConfigValue.loadConfig();

    /**
     * Creates new form TableDataDialog
     */
    public TableDataDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        refreshData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        redeemTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        memberTable = new javax.swing.JTable();
        btnRefreshAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        redeemTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        redeemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "redeem_code", "product_code", "point_to_redeem", "use_in_branch", "emp_code_redeem", "member_code_use", "qty_in_use", "system_create", "redeem_date", "in_time", "status_use", "active", "redeem_name", "bill_no", "discount_amt", "discount_percent", "redeem_or_free", "data_sync"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(redeemTable);

        jTabbedPane1.addTab("Redeem", jScrollPane2);

        memberTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        memberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Member_Code", "Member_NameThai", "Member_Mobile", "Member_TotalScore", "Member_TotalPurchase"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(memberTable);

        jTabbedPane1.addTab("Memmaster+Billno", jScrollPane3);

        btnRefreshAll.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRefreshAll.setText("Refresh All Data");
        btnRefreshAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefreshAll)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefreshAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshAllActionPerformed
        refreshData();
    }//GEN-LAST:event_btnRefreshAllActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefreshAll;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable memberTable;
    private javax.swing.JTable redeemTable;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel redeemModel = null;
    private DefaultTableModel memberModel = null;

    private void refreshData() {
        redeemModel = (DefaultTableModel) redeemTable.getModel();
        memberModel = (DefaultTableModel) memberTable.getModel();

        emptyModel(redeemModel);
        emptyModel(memberModel);

        // load billno table data
        MySQLConnect mysql1 = new MySQLConnect();
        try {
            String sql1 = "select m.Member_Code, m.Member_NameThai, m.Member_HomeTel,"
                    + "m.Member_Email, m.Member_Brithday, m.Member_ExpiredDate,"
                    + "m.Member_TotalPurchase, m.Member_Mobile, m.Member_TotalScore,"
                    + "m.Member_TitleNameThai, m.Member_SurnameThai "
                    + "from " + config.getPosDb() + ".billno b "
                    + "left join " + config.getPosMemberDb() + ".memmaster m on "
                    + "b.B_MemCode = m.Member_Code ";
            try ( Connection conn = mysql1.open("member");  PreparedStatement stmt = conn.prepareStatement(sql1)) {
                try ( ResultSet rs = stmt.executeQuery(sql1)) {
                    while (rs.next()) {
                        memberModel.addRow(new Object[]{
                            rs.getString("Member_Code"),
                            ThaiUtil.readThaiAscii(rs.getString("Member_NameThai")),
                            rs.getString("Member_Mobile"),
                            rs.getInt("Member_TotalScore"),
                            rs.getDouble("Member_TotalPurchase")
                        });
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.error(e.getMessage());
        } finally {
            mysql1.close();
        }

        // load redeem table data
        MySQLConnect mysql2 = new MySQLConnect();
        try {
            String sql = "select * from redeem";
            try ( Connection conn = mysql2.open("pos");  PreparedStatement stmt = conn.prepareStatement(sql)) {
                try ( ResultSet rs = stmt.executeQuery(sql)) {
                    while (rs.next()) {
                        redeemModel.addRow(new Object[]{
                            rs.getString("redeem_code"),
                            rs.getString("product_code"),
                            rs.getInt("point_to_redeem"),
                            rs.getString("use_in_branch"),
                            rs.getString("emp_code_redeem"),
                            rs.getString("member_code_use"),
                            rs.getInt("qty_in_use"),
                            rs.getString("system_create"),
                            rs.getString("redeem_date"),
                            rs.getString("in_time"),
                            rs.getString("status_use"),
                            rs.getString("active"),
                            ThaiUtil.readThaiAscii(rs.getString("redeem_name")),
                            rs.getString("bill_no"),
                            rs.getDouble("discount_amt"),
                            rs.getInt("discount_percent"),
                            rs.getString("redeem_or_free"),
                            rs.getString("data_sync")
                        });
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.error(e.getMessage());
        } finally {
            mysql2.close();
        }
    }

    private void emptyModel(DefaultTableModel model) {
        int size = model.getRowCount();
        for (int i = 0; i < size; i++) {
            model.removeRow(0);
        }
    }
}
